# -*- coding: utf-8 -*-
"""trainer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_GmR_MmnpTEW6TyNnzzWK84z_MX0Z95u
"""

import copy
import csv
import os
import time

import numpy as np
import torch
from tqdm import tqdm



def prod_iou(prediction, labels):
    pred = np.where(prediction > 0.1, 1., 0.)
    label = np.where(labels > 0., 1., 0.)

    intersection = np.logical_and(pred, label)
    union = np.logical_or(pred, label)

    intersection = len(intersection[intersection])
    union = len(union[union])

    SMOOTH = 1e-6
    iou = (intersection + SMOOTH) / (union + SMOOTH)

    return iou


def train_model(model, criterion, dataloaders, optimizer, metrics, bpath,
                num_epochs):
    since = time.time()
    best_model_wts = copy.deepcopy(model.state_dict())
    best_loss = 1e10
    # Use gpu if available
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.to(device)
    # Initialize the log file for training and testing loss and metrics
    fieldnames = ['epoch', 'Train_loss', 'Test_loss'] + \
        [f'Train_{m}' for m in metrics.keys()] + \
        [f'Test_{m}' for m in metrics.keys()]
    with open(os.path.join(bpath, 'log.csv'), 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

    for epoch in range(1, num_epochs + 1):
        print('Epoch {}/{}'.format(epoch, num_epochs))
        print('-' * 10)
        # Each epoch has a training and validation phase
        # Initialize batch summary
        batchsummary = {a: [0] for a in fieldnames}

        for phase in ['Train', 'Test']:
            if phase == 'Train':
                model.train()  # Set model to training mode
            else:
                model.eval()  # Set model to evaluate mode

            ious = 0
            cnt = 0
            # iou_test = 0

            # Iterate over data.
            for sample in tqdm(iter(dataloaders[phase])):
                cnt += 1
                inputs = sample['image'].to(device)
                masks = sample['mask'].to(device)
                
                # zero the parameter gradients
                optimizer.zero_grad()

                # track history if only in train
                with torch.set_grad_enabled(phase == 'Train'):
                    outputs = model(inputs)
                    loss = criterion(outputs['out'], masks)

                    y_pred = outputs['out'].data.cpu().numpy().ravel()
                    y_true = masks.data.cpu().numpy().ravel()
                    
                    batch_size = masks.shape[0]
                    ious += prod_iou(y_pred, y_true)

                    # iou_test += iou
                    # print('\n\nIoU :',iou)
                    # ious += iou / (cnt*batch_size)

                    # print('ious :', f'{ious:.3f}', cnt, batch_size)

                    for name, metric in metrics.items():
                        if name == 'f1_score':

                            batchsummary[f'{phase}_{name}'].append(
                                metric(y_true > 0, y_pred > 0.1))
                        elif name == 'auroc':
                            batchsummary[f'{phase}_{name}'].append(
                                metric(y_true.astype('uint8'), y_pred))

                    if phase == 'Train':
                        loss.backward()
                        optimizer.step()
            # print('i/c : {}\n\n'.format(ious / cnt))
            batchsummary[f'{phase}_iou'] = ious / cnt

            batchsummary['epoch'] = epoch
            epoch_loss = loss
            batchsummary[f'{phase}_loss'] = epoch_loss.item()
            print('{} Loss: {:.4f}'.format(phase, loss))

        for field in fieldnames[3:]:
            batchsummary[field] = np.mean(batchsummary[field])
        print(batchsummary)
        with open(os.path.join(bpath, 'log.csv'), 'a', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow(batchsummary)
            # deep copy the model
            if phase == 'Test' and loss < best_loss:
                best_loss = loss
                best_model_wts = copy.deepcopy(model.state_dict())

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Lowest Loss: {:4f}'.format(best_loss))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model